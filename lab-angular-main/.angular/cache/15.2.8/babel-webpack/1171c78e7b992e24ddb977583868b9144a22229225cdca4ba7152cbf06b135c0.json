{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000/users';\n    this.adminPin = '1234';\n    this.sessionStartTime = null;\n  }\n  checkDuplicateEmail(email) {\n    return this.http.get(this.apiUrl).pipe(map(users => ({\n      isDuplicate: users.some(user => user.email.toLowerCase() === email.toLowerCase()),\n      users\n    })), catchError(error => throwError(() => new Error('Server error while checking email.'))));\n  }\n  register(user) {\n    return this.checkDuplicateEmail(user.email).pipe(switchMap(({\n      isDuplicate,\n      users\n    }) => {\n      if (isDuplicate) {\n        return throwError(() => new Error('This email is already registered.'));\n      }\n      const adminCount = users.filter(u => u.role === 'admin').length;\n      if (user.role === 'admin' && adminCount > 0) {\n        return throwError(() => new Error('Only one admin is allowed.'));\n      }\n      return this.http.post(this.apiUrl, user);\n    }), catchError(error => throwError(() => new Error(error.message || 'Registration failed.'))));\n  }\n  login(email, password) {\n    return this.http.get(`${this.apiUrl}?email=${email}&password=${password}`).pipe(map(users => {\n      if (users.length > 0) {\n        const user = users[0];\n        user.activeTime = user.activeTime || 0;\n        this.sessionStartTime = Date.now();\n        localStorage.setItem('user', JSON.stringify(user));\n        return user;\n      }\n      throw new Error('Invalid email or password');\n    }), catchError(error => throwError(() => new Error('Login failed.'))));\n  }\n  logout() {\n    if (this.sessionStartTime) {\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\n      const activeTime = Math.floor((Date.now() - this.sessionStartTime) / 60000); // In minutes\n      user.activeTime = (user.activeTime || 0) + activeTime;\n      this.http.put(`${this.apiUrl}/${user.id}`, user).subscribe();\n    }\n    localStorage.removeItem('user');\n    this.sessionStartTime = null;\n  }\n  verifyAdminPin(pin) {\n    return pin === this.adminPin;\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('user');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,GAAG,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;AAO3D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAJ5C,WAAM,GAAG,6BAA6B;IACtC,aAAQ,GAAG,MAAM;IACjB,qBAAgB,GAAkB,IAAI;EAEiB;EAE/DC,mBAAmB,CAACC,KAAa;IAC/B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAC5CX,GAAG,CAACY,KAAK,KAAK;MAAEC,WAAW,EAAED,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACP,KAAK,CAACQ,WAAW,EAAE,KAAKR,KAAK,CAACQ,WAAW,EAAE,CAAC;MAAEJ;IAAK,CAAE,CAAC,CAAC,EAC5GV,UAAU,CAACe,KAAK,IAAIlB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,oCAAoC,CAAC,CAAC,CAAC,CACvF;EACH;EAEAC,QAAQ,CAACJ,IAAU;IACjB,OAAO,IAAI,CAACR,mBAAmB,CAACQ,IAAI,CAACP,KAAK,CAAC,CAACG,IAAI,CAC9CV,SAAS,CAAC,CAAC;MAAEY,WAAW;MAAED;IAAK,CAAE,KAAI;MACnC,IAAIC,WAAW,EAAE;QACf,OAAOd,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,mCAAmC,CAAC,CAAC;;MAEzE,MAAME,UAAU,GAAGR,KAAK,CAACS,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,OAAO,CAAC,CAACC,MAAM;MAC/D,IAAIT,IAAI,CAACQ,IAAI,KAAK,OAAO,IAAIH,UAAU,GAAG,CAAC,EAAE;QAC3C,OAAOrB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,4BAA4B,CAAC,CAAC;;MAElE,OAAO,IAAI,CAACb,IAAI,CAACoB,IAAI,CAAO,IAAI,CAACf,MAAM,EAAEK,IAAI,CAAC;IAChD,CAAC,CAAC,EACFb,UAAU,CAACe,KAAK,IAAIlB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAACD,KAAK,CAACS,OAAO,IAAI,sBAAsB,CAAC,CAAC,CAAC,CAC1F;EACH;EAEAC,KAAK,CAACnB,KAAa,EAAEoB,QAAgB;IACnC,OAAO,IAAI,CAACvB,IAAI,CAACI,GAAG,CAAS,GAAG,IAAI,CAACC,MAAM,UAAUF,KAAK,aAAaoB,QAAQ,EAAE,CAAC,CAACjB,IAAI,CACrFX,GAAG,CAACY,KAAK,IAAG;MACV,IAAIA,KAAK,CAACY,MAAM,GAAG,CAAC,EAAE;QACpB,MAAMT,IAAI,GAAGH,KAAK,CAAC,CAAC,CAAC;QACrBG,IAAI,CAACc,UAAU,GAAGd,IAAI,CAACc,UAAU,IAAI,CAAC;QACtC,IAAI,CAACC,gBAAgB,GAAGC,IAAI,CAACC,GAAG,EAAE;QAClCC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACrB,IAAI,CAAC,CAAC;QAClD,OAAOA,IAAI;;MAEb,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;IAC9C,CAAC,CAAC,EACFhB,UAAU,CAACe,KAAK,IAAIlB,UAAU,CAAC,MAAM,IAAImB,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAClE;EACH;EAEAmB,MAAM;IACJ,IAAI,IAAI,CAACP,gBAAgB,EAAE;MACzB,MAAMf,IAAI,GAAGoB,IAAI,CAACG,KAAK,CAACL,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;MAC7D,MAAMV,UAAU,GAAGW,IAAI,CAACC,KAAK,CAAC,CAACV,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACF,gBAAgB,IAAI,KAAK,CAAC,CAAC,CAAC;MAC7Ef,IAAI,CAACc,UAAU,GAAG,CAACd,IAAI,CAACc,UAAU,IAAI,CAAC,IAAIA,UAAU;MACrD,IAAI,CAACxB,IAAI,CAACqC,GAAG,CAAO,GAAG,IAAI,CAAChC,MAAM,IAAIK,IAAI,CAAC4B,EAAE,EAAE,EAAE5B,IAAI,CAAC,CAAC6B,SAAS,EAAE;;IAEpEX,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACf,gBAAgB,GAAG,IAAI;EAC9B;EAEAgB,cAAc,CAACC,GAAW;IACxB,OAAOA,GAAG,KAAK,IAAI,CAACC,QAAQ;EAC9B;EAEAC,UAAU;IACR,OAAO,CAAC,CAAChB,YAAY,CAACM,OAAO,CAAC,MAAM,CAAC;EACvC;;AA/DWpC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+C,SAAX/C,WAAW;EAAAgD,YAFV;AAAM","names":["throwError","map","switchMap","catchError","AuthService","constructor","http","router","checkDuplicateEmail","email","get","apiUrl","pipe","users","isDuplicate","some","user","toLowerCase","error","Error","register","adminCount","filter","u","role","length","post","message","login","password","activeTime","sessionStartTime","Date","now","localStorage","setItem","JSON","stringify","logout","parse","getItem","Math","floor","put","id","subscribe","removeItem","verifyAdminPin","pin","adminPin","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\malik\\Downloads\\Evaluation\\lab-angular-main\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { User } from '../shared/models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000/users';\n  private adminPin = '1234'; \n  private sessionStartTime: number | null = null;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  checkDuplicateEmail(email: string): Observable<{ isDuplicate: boolean; users: User[] }> {\n    return this.http.get<User[]>(this.apiUrl).pipe(\n      map(users => ({ isDuplicate: users.some(user => user.email.toLowerCase() === email.toLowerCase()), users })),\n      catchError(error => throwError(() => new Error('Server error while checking email.')))\n    );\n  }\n\n  register(user: User): Observable<User> {\n    return this.checkDuplicateEmail(user.email).pipe(\n      switchMap(({ isDuplicate, users }) => {\n        if (isDuplicate) {\n          return throwError(() => new Error('This email is already registered.'));\n        }\n        const adminCount = users.filter(u => u.role === 'admin').length;\n        if (user.role === 'admin' && adminCount > 0) {\n          return throwError(() => new Error('Only one admin is allowed.'));\n        }\n        return this.http.post<User>(this.apiUrl, user);\n      }),\n      catchError(error => throwError(() => new Error(error.message || 'Registration failed.')))\n    );\n  }\n\n  login(email: string, password: string): Observable<User> {\n    return this.http.get<User[]>(`${this.apiUrl}?email=${email}&password=${password}`).pipe(\n      map(users => {\n        if (users.length > 0) {\n          const user = users[0];\n          user.activeTime = user.activeTime || 0;\n          this.sessionStartTime = Date.now();\n          localStorage.setItem('user', JSON.stringify(user));\n          return user;\n        }\n        throw new Error('Invalid email or password');\n      }),\n      catchError(error => throwError(() => new Error('Login failed.')))\n    );\n  }\n\n  logout(): void {\n    if (this.sessionStartTime) {\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\n      const activeTime = Math.floor((Date.now() - this.sessionStartTime) / 60000); // In minutes\n      user.activeTime = (user.activeTime || 0) + activeTime;\n      this.http.put<User>(`${this.apiUrl}/${user.id}`, user).subscribe();\n    }\n    localStorage.removeItem('user');\n    this.sessionStartTime = null;\n  }\n\n  verifyAdminPin(pin: string): boolean {\n    return pin === this.adminPin;\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('user');\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}