{"ast":null,"code":"import { catchError, map, switchMap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  login(email, password) {\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => {\n      const user = users.find(u => u.email === email && u.password === password);\n      if (user) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        return true;\n      }\n      return false;\n    }));\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('currentUser');\n  }\n  checkDuplicateEmail(email) {\n    return this.http.get(this.apiUrl).pipe(map(users => users.some(user => user.email.toLowerCase() === email.toLowerCase())), catchError(error => {\n      console.error('Error checking duplicate email:', error);\n      return [true]; // Fallback to prevent registration on error\n    }));\n  }\n  // Register a new user with duplicate email check\n  register(user) {\n    return this.checkDuplicateEmail(user.email).pipe(switchMap(isDuplicate => {\n      if (isDuplicate) {\n        return throwError(() => new Error('This email is already registered. Please use a different email or sign in.'));\n      }\n      return this.http.post(this.apiUrl, user).pipe(map(response => {\n        localStorage.setItem('user', JSON.stringify(response));\n        return response;\n      }));\n    }), catchError(error => {\n      console.error('Registration error:', error);\n      return throwError(() => new Error(error.message || 'Registration failed. Please try again.'));\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,EAAcC,SAAS,EAAEC,UAAU,QAAQ,MAAM;;;AAMzE,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,uBAAuB;EAEA;EAExCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC,CAACC,IAAI,CACtDX,GAAG,CAAEY,KAAK,IAAI;MACZ,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CACpBC,CAAM,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,IAAIQ,CAAC,CAACP,QAAQ,KAAKA,QAAQ,CACzD;MACD,IAAIK,IAAI,EAAE;QACRG,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;QACzD,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;EAEAO,MAAM;IACJJ,YAAY,CAACK,UAAU,CAAC,aAAa,CAAC;EACxC;EAEAC,UAAU;IACR,OAAO,CAAC,CAACN,YAAY,CAACO,OAAO,CAAC,aAAa,CAAC;EAC9C;EAEAC,mBAAmB,CAACjB,KAAa;IAC/B,OAAO,IAAI,CAACF,IAAI,CAACI,GAAG,CAAS,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAC5CX,GAAG,CAACY,KAAK,IAAIA,KAAK,CAACa,IAAI,CAACZ,IAAI,IAAIA,IAAI,CAACN,KAAK,CAACmB,WAAW,EAAE,KAAKnB,KAAK,CAACmB,WAAW,EAAE,CAAC,CAAC,EAClF3B,UAAU,CAAC4B,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CACH;EACH;EAEA;EACAE,QAAQ,CAAChB,IAAU;IACjB,OAAO,IAAI,CAACW,mBAAmB,CAACX,IAAI,CAACN,KAAK,CAAC,CAACI,IAAI,CAC9CV,SAAS,CAAC6B,WAAW,IAAG;MACtB,IAAIA,WAAW,EAAE;QACf,OAAO5B,UAAU,CAAC,MAAM,IAAI6B,KAAK,CAAC,4EAA4E,CAAC,CAAC;;MAElH,OAAO,IAAI,CAAC1B,IAAI,CAAC2B,IAAI,CAAO,IAAI,CAACtB,MAAM,EAAEG,IAAI,CAAC,CAACF,IAAI,CACjDX,GAAG,CAACiC,QAAQ,IAAG;QACbjB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACc,QAAQ,CAAC,CAAC;QACtD,OAAOA,QAAQ;MACjB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,EACFlC,UAAU,CAAC4B,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,OAAOzB,UAAU,CAAC,MAAM,IAAI6B,KAAK,CAACJ,KAAK,CAACO,OAAO,IAAI,wCAAwC,CAAC,CAAC;IAC/F,CAAC,CAAC,CACH;EACH;;AAzDW/B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgC,SAAXhC,WAAW;EAAAiC,YAFV;AAAM","names":["catchError","map","switchMap","throwError","AuthService","constructor","http","login","email","password","get","apiUrl","pipe","users","user","find","u","localStorage","setItem","JSON","stringify","logout","removeItem","isLoggedIn","getItem","checkDuplicateEmail","some","toLowerCase","error","console","register","isDuplicate","Error","post","response","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\malik\\Desktop\\Capstone evaluation\\lab-angular-main\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, map, Observable, switchMap, throwError } from 'rxjs';\nimport { User } from '../shared/models/user.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string): Observable<boolean> {\n    return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\n      map((users) => {\n        const user = users.find(\n          (u: any) => u.email === email && u.password === password\n        );\n        if (user) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          return true;\n        }\n        return false;\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('currentUser');\n  }\n\n  checkDuplicateEmail(email: string): Observable<boolean> {\n    return this.http.get<User[]>(this.apiUrl).pipe(\n      map(users => users.some(user => user.email.toLowerCase() === email.toLowerCase())),\n      catchError(error => {\n        console.error('Error checking duplicate email:', error);\n        return [true]; // Fallback to prevent registration on error\n      })\n    );\n  }\n\n  // Register a new user with duplicate email check\n  register(user: User): Observable<User> {\n    return this.checkDuplicateEmail(user.email).pipe(\n      switchMap(isDuplicate => {\n        if (isDuplicate) {\n          return throwError(() => new Error('This email is already registered. Please use a different email or sign in.'));\n        }\n        return this.http.post<User>(this.apiUrl, user).pipe(\n          map(response => {\n            localStorage.setItem('user', JSON.stringify(response)); \n            return response;\n          })\n        );\n      }),\n      catchError(error => {\n        console.error('Registration error:', error);\n        return throwError(() => new Error(error.message || 'Registration failed. Please try again.'));\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}