{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/core/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class RegisterComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.errorMessage = null;\n    this.showAdminPin = false;\n    this.isEmailDuplicate = false; // New flag to track duplicate email\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      location: ['', Validators.required],\n      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]],\n      role: ['user', Validators.required],\n      adminPin: ['']\n    });\n  }\n  ngOnInit() {\n    this.registerForm.get('email')?.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe(email => {\n      if (email && this.registerForm.get('email')?.valid) {\n        this.authService.checkDuplicateEmail(email).subscribe({\n          next: ({\n            isDuplicate\n          }) => {\n            if (isDuplicate) {\n              this.isEmailDuplicate = true; // Set flag\n              alert('This email is already registered.'); // Show alert\n            } else {\n              this.isEmailDuplicate = false; // Clear flag\n            }\n          },\n\n          error: err => {\n            this.errorMessage = err.message; // Keep errorMessage for API errors\n          }\n        });\n      } else {\n        this.isEmailDuplicate = false; // Clear flag if email is invalid or empty\n      }\n    });\n  }\n\n  onRegister() {\n    if (this.registerForm.valid) {\n      // Prevent submission if email is a duplicate\n      if (this.isEmailDuplicate) {\n        alert('This email is already registered.'); // Re-alert on submission\n        return;\n      }\n      const user = this.registerForm.value;\n      if (user.role === 'admin' && !user.adminPin) {\n        this.errorMessage = 'Admin pin is required.';\n        return;\n      }\n      this.authService.register(user).subscribe({\n        next: response => {\n          this.errorMessage = null;\n          alert('Registration successful');\n          this.router.navigate(['/auth/sign-in']);\n        },\n        error: err => {\n          this.errorMessage = err.message;\n        }\n      });\n    } else {\n      this.errorMessage = 'Please fill all fields correctly.';\n    }\n  }\n  onRoleChange(event) {\n    this.showAdminPin = event.target.value === 'admin';\n    if (!this.showAdminPin) {\n      this.registerForm.get('adminPin')?.setValue('');\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 0,\n  vars: 0,\n  template: function RegisterComponent_Template(rf, ctx) {},\n  styles: [\".container[_ngcontent-%COMP%] {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  height: 100vh;\\r\\n}\\r\\n\\r\\n.card[_ngcontent-%COMP%] {\\r\\n  background-color: #f9f9f9;\\r\\n  padding: 20px;\\r\\n  border-radius: 8px;\\r\\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\\r\\n  width: 100%;\\r\\n  max-width: 400px;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 15px;\\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\r\\n  display: block;\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.form-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .form-group[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  padding: 8px;\\r\\n  border: 1px solid #ddd;\\r\\n  border-radius: 4px;\\r\\n}\\r\\n\\r\\nbutton[_ngcontent-%COMP%] {\\r\\n  background-color: #4CAF50;\\r\\n  color: white;\\r\\n  padding: 10px;\\r\\n  border: none;\\r\\n  border-radius: 4px;\\r\\n  cursor: pointer;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\nbutton[_ngcontent-%COMP%]:disabled {\\r\\n  background-color: #cccccc;\\r\\n  cursor: not-allowed;\\r\\n}\\r\\n\\r\\n.error-message[_ngcontent-%COMP%] {\\r\\n  color: #ff0000;\\r\\n  margin-top: 10px;\\r\\n  font-size: 14px;\\r\\n}\\r\\n\\r\\np[_ngcontent-%COMP%] {\\r\\n  margin-top: 10px;\\r\\n}\\r\\n\\r\\na[_ngcontent-%COMP%] {\\r\\n  color: #4CAF50;\\r\\n  text-decoration: none;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvYXV0aC9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsYUFBYTtBQUNmOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsdUNBQXVDO0VBQ3ZDLFdBQVc7RUFDWCxnQkFBZ0I7RUFDaEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGtCQUFrQjtBQUNwQjs7QUFFQTs7RUFFRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLHNCQUFzQjtFQUN0QixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsWUFBWTtFQUNaLGFBQWE7RUFDYixZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixXQUFXO0FBQ2I7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGdCQUFnQjtFQUNoQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsY0FBYztFQUNkLHFCQUFxQjtBQUN2QiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG59XHJcblxyXG4uY2FyZCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcclxuICBwYWRkaW5nOiAyMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMSk7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiA0MDBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5mb3JtLWdyb3VwIHtcclxuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG59XHJcblxyXG4uZm9ybS1ncm91cCBsYWJlbCB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xyXG59XHJcblxyXG4uZm9ybS1ncm91cCBpbnB1dCxcclxuLmZvcm0tZ3JvdXAgc2VsZWN0IHtcclxuICB3aWR0aDogMTAwJTtcclxuICBwYWRkaW5nOiA4cHg7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcclxuICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbn1cclxuXHJcbmJ1dHRvbiB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzRDQUY1MDtcclxuICBjb2xvcjogd2hpdGU7XHJcbiAgcGFkZGluZzogMTBweDtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuYnV0dG9uOmRpc2FibGVkIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjY2NjO1xyXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XHJcbn1cclxuXHJcbi5lcnJvci1tZXNzYWdlIHtcclxuICBjb2xvcjogI2ZmMDAwMDtcclxuICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxufVxyXG5cclxucCB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxufVxyXG5cclxuYSB7XHJcbiAgY29sb3I6ICM0Q0FGNTA7XHJcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","debounceTime","distinctUntilChanged","RegisterComponent","constructor","fb","authService","router","registerForm","group","email","required","password","minLength","firstName","lastName","location","mobileNumber","pattern","role","adminPin","ngOnInit","get","valueChanges","pipe","subscribe","valid","checkDuplicateEmail","next","isDuplicate","isEmailDuplicate","alert","error","err","errorMessage","message","onRegister","user","value","register","response","navigate","onRoleChange","event","showAdminPin","target","setValue","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\Users\\malik\\Downloads\\Angular Capstone Project\\lab-angular-main\\src\\app\\features\\auth\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/auth.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { User } from 'src/app/shared/models/user.model';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  errorMessage: string | null = null;\n  showAdminPin: boolean = false;\n  isEmailDuplicate: boolean = false; // New flag to track duplicate email\n\n  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      location: ['', Validators.required],\n      mobileNumber: ['', [Validators.required, Validators.pattern('^[0-9]{10}$')]],\n      role: ['user', Validators.required],\n      adminPin: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    this.registerForm.get('email')?.valueChanges.pipe(\n      debounceTime(300),\n      distinctUntilChanged()\n    ).subscribe(email => {\n      if (email && this.registerForm.get('email')?.valid) {\n        this.authService.checkDuplicateEmail(email).subscribe({\n          next: ({ isDuplicate }) => {\n            if (isDuplicate) {\n              this.isEmailDuplicate = true; // Set flag\n              alert('This email is already registered.'); // Show alert\n            } else {\n              this.isEmailDuplicate = false; // Clear flag\n            }\n          },\n          error: (err) => {\n            this.errorMessage = err.message; // Keep errorMessage for API errors\n          }\n        });\n      } else {\n        this.isEmailDuplicate = false; // Clear flag if email is invalid or empty\n      }\n    });\n  }\n\n  onRegister(): void {\n    if (this.registerForm.valid) {\n      // Prevent submission if email is a duplicate\n      if (this.isEmailDuplicate) {\n        alert('This email is already registered.'); // Re-alert on submission\n        return;\n      }\n\n      const user: User = this.registerForm.value;\n      if (user.role === 'admin' && !user.adminPin) {\n        this.errorMessage = 'Admin pin is required.';\n        return;\n      }\n      this.authService.register(user).subscribe({\n        next: (response) => {\n          this.errorMessage = null;\n          alert('Registration successful');\n          this.router.navigate(['/auth/sign-in']);\n        },\n        error: (err) => {\n          this.errorMessage = err.message;\n        }\n      });\n    } else {\n      this.errorMessage = 'Please fill all fields correctly.';\n    }\n  }\n\n  onRoleChange(event: any) {\n    this.showAdminPin = event.target.value === 'admin';\n    if (!this.showAdminPin) {\n      this.registerForm.get('adminPin')?.setValue('');\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}