{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/core/data.service\";\nexport class UpdateProductComponent {\n  constructor(fb, route, dataService, router) {\n    this.fb = fb;\n    this.route = route;\n    this.dataService = dataService;\n    this.router = router;\n    this.errorMessage = null;\n    this.categories = ['Electronics', 'Clothing', 'Books'];\n    this.productId = +this.route.snapshot.paramMap.get('id');\n    this.updateProductForm = this.fb.group({\n      id: [this.productId],\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required],\n      manufacturingDate: ['', Validators.required],\n      price: [0, [Validators.required, Validators.min(1), Validators.max(1000)]],\n      quantity: [0, [Validators.required, Validators.min(0)]],\n      category: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.dataService.getProductById(this.productId).subscribe({\n      next: product => {\n        this.updateProductForm.patchValue(product);\n      },\n      error: err => this.errorMessage = err.message\n    });\n  }\n  onSubmit() {\n    if (this.updateProductForm.valid) {\n      const product = this.updateProductForm.value;\n      this.dataService.updateProduct(product).subscribe({\n        next: () => {\n          alert('Product updated successfully');\n          this.router.navigate(['/inventory']);\n        },\n        error: err => this.errorMessage = err.message\n      });\n    } else {\n      this.errorMessage = 'Please fill all fields correctly.';\n    }\n  }\n}\nUpdateProductComponent.ɵfac = function UpdateProductComponent_Factory(t) {\n  return new (t || UpdateProductComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.DataService), i0.ɵɵdirectiveInject(i2.Router));\n};\nUpdateProductComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateProductComponent,\n  selectors: [[\"app-update-product\"]],\n  decls: 0,\n  vars: 0,\n  template: function UpdateProductComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAGA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAOnE,OAAM,MAAOC,sBAAsB;EAMjCC,YACUC,EAAe,EACfC,KAAqB,EACrBC,WAAwB,EACxBC,MAAc;IAHd,OAAE,GAAFH,EAAE;IACF,UAAK,GAALC,KAAK;IACL,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IARhB,iBAAY,GAAkB,IAAI;IAClC,eAAU,GAAa,CAAC,aAAa,EAAE,UAAU,EAAE,OAAO,CAAC;IASzD,IAAI,CAACC,SAAS,GAAG,CAAC,IAAI,CAACH,KAAK,CAACI,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAE;IACzD,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACR,EAAE,CAACS,KAAK,CAAC;MACrCC,EAAE,EAAE,CAAC,IAAI,CAACN,SAAS,CAAC;MACpBO,IAAI,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACe,QAAQ,CAAC;MAC/BC,WAAW,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACe,QAAQ,CAAC;MACtCE,YAAY,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACe,QAAQ,CAAC;MACvCG,iBAAiB,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACe,QAAQ,CAAC;MAC5CI,KAAK,EAAE,CAAC,CAAC,EAAE,CAACnB,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACoB,GAAG,CAAC,CAAC,CAAC,EAAEpB,UAAU,CAACqB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;MAC1EC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAACtB,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACoB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACvDG,QAAQ,EAAE,CAAC,EAAE,EAAEvB,UAAU,CAACe,QAAQ;KACnC,CAAC;EACJ;EAEAS,QAAQ;IACN,IAAI,CAACnB,WAAW,CAACoB,cAAc,CAAC,IAAI,CAAClB,SAAS,CAAC,CAACmB,SAAS,CAAC;MACxDC,IAAI,EAAGC,OAAO,IAAI;QAChB,IAAI,CAACjB,iBAAiB,CAACkB,UAAU,CAACD,OAAO,CAAC;MAC5C,CAAC;MACDE,KAAK,EAAGC,GAAG,IAAK,IAAI,CAACC,YAAY,GAAGD,GAAG,CAACE;KACzC,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACvB,iBAAiB,CAACwB,KAAK,EAAE;MAChC,MAAMP,OAAO,GAAG,IAAI,CAACjB,iBAAiB,CAACyB,KAAK;MAC5C,IAAI,CAAC/B,WAAW,CAACgC,aAAa,CAACT,OAAO,CAAC,CAACF,SAAS,CAAC;QAChDC,IAAI,EAAE,MAAK;UACTW,KAAK,CAAC,8BAA8B,CAAC;UACrC,IAAI,CAAChC,MAAM,CAACiC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACtC,CAAC;QACDT,KAAK,EAAGC,GAAG,IAAK,IAAI,CAACC,YAAY,GAAGD,GAAG,CAACE;OACzC,CAAC;KACH,MAAM;MACL,IAAI,CAACD,YAAY,GAAG,mCAAmC;;EAE3D;;AA/CW/B,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAuC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["Validators","UpdateProductComponent","constructor","fb","route","dataService","router","productId","snapshot","paramMap","get","updateProductForm","group","id","name","required","description","manufacturer","manufacturingDate","price","min","max","quantity","category","ngOnInit","getProductById","subscribe","next","product","patchValue","error","err","errorMessage","message","onSubmit","valid","value","updateProduct","alert","navigate","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\Users\\malik\\Downloads\\Evaluation\\lab-angular-main\\src\\app\\features\\inventory\\update-product\\update-product.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from 'src/app/core/data.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-update-product',\n  templateUrl: './update-product.component.html',\n  styleUrls: ['./update-product.component.css']\n})\nexport class UpdateProductComponent implements OnInit {\n  updateProductForm: FormGroup;\n  errorMessage: string | null = null;\n  categories: string[] = ['Electronics', 'Clothing', 'Books'];\n  productId: number;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private dataService: DataService,\n    private router: Router\n  ) {\n    this.productId = +this.route.snapshot.paramMap.get('id')!;\n    this.updateProductForm = this.fb.group({\n      id: [this.productId],\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required],\n      manufacturingDate: ['', Validators.required],\n      price: [0, [Validators.required, Validators.min(1), Validators.max(1000)]],\n      quantity: [0, [Validators.required, Validators.min(0)]],\n      category: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.dataService.getProductById(this.productId).subscribe({\n      next: (product) => {\n        this.updateProductForm.patchValue(product);\n      },\n      error: (err) => this.errorMessage = err.message\n    });\n  }\n\n  onSubmit(): void {\n    if (this.updateProductForm.valid) {\n      const product = this.updateProductForm.value;\n      this.dataService.updateProduct(product).subscribe({\n        next: () => {\n          alert('Product updated successfully');\n          this.router.navigate(['/inventory']);\n        },\n        error: (err) => this.errorMessage = err.message\n      });\n    } else {\n      this.errorMessage = 'Please fill all fields correctly.';\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}