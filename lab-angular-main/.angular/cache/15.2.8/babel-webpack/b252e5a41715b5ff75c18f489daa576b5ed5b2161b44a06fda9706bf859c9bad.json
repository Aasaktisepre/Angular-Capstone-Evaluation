{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ProductDetailComponent = class ProductDetailComponent {\n  constructor(route, dataService, authService) {\n    this.route = route;\n    this.dataService = dataService;\n    this.authService = authService;\n    this.product = null;\n    this.errorMessage = null;\n    this.newRating = 0;\n    this.newReview = '';\n    this.userId = 0;\n    this.currentUser = {}; // Store user details\n    this.editRatingIndex = null; // Track which rating to edit\n  }\n\n  ngOnInit() {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.userId = this.getCurrentUserId();\n    this.currentUser = JSON.parse(localStorage.getItem('user') || '{}'); // Get user details\n    this.dataService.getProductById(id).subscribe({\n      next: product => {\n        this.product = {\n          ...product,\n          availabilityStatus: this.getAvailabilityStatus(product.quantity) || 'Out of Stock'\n        };\n      },\n      error: err => this.errorMessage = err.message\n    });\n  }\n  getCurrentUserId() {\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    return user.id || 0;\n  }\n  getAvailabilityStatus(quantity) {\n    if (quantity > 10) return 'In Stock';\n    if (quantity > 0) return 'Low Stock';\n    return 'Out of Stock';\n  }\n  submitRating() {\n    if (!this.product) return;\n    const userRating = this.product.ratings?.find(r => r.userId === this.userId);\n    if (userRating && this.editRatingIndex === null) {\n      this.errorMessage = 'You have already rated this product. Use the edit option to modify your rating.';\n      // Disable form interaction when duplicate is detected\n      this.newRating = 0;\n      this.newReview = '';\n      return;\n    }\n    if (this.newRating >= 1 && this.newRating <= 5 && this.newReview && this.product) {\n      const ratingObj = {\n        rating: this.newRating,\n        review: this.newReview,\n        userId: this.userId\n      };\n      if (this.editRatingIndex !== null) {\n        // Edit existing rating\n        this.product.ratings[this.editRatingIndex] = ratingObj;\n        this.editRatingIndex = null; // Reset edit mode\n      } else {\n        // Add new rating (if no duplicate)\n        this.product.ratings = this.product.ratings || [];\n        this.product.ratings.push(ratingObj);\n      }\n      this.dataService.updateProduct(this.product).subscribe({\n        next: () => {\n          this.newRating = 0;\n          this.newReview = '';\n          this.errorMessage = null;\n          // Refresh the component to reflect changes\n          this.ngOnInit();\n        },\n        error: err => this.errorMessage = err.message\n      });\n    } else {\n      this.errorMessage = 'Please select a rating (1-5) and provide a review.';\n    }\n  }\n  getAverageRating() {\n    if (!this.product?.ratings?.length) return 0; // Handle empty or undefined ratings\n    const sum = this.product.ratings.reduce((acc, r) => acc + r.rating, 0);\n    return Number((sum / this.product.ratings.length).toFixed(1)); // Ensure one decimal place\n  }\n\n  getUserName(userId) {\n    // Use firstName from localStorage for simplicity\n    const users = JSON.parse(localStorage.getItem('user') || '{}');\n    return users.firstName || `User ${userId}`; // Fallback to userId if name not available\n  }\n\n  startEditRating(index) {\n    if (!this.product?.ratings) return;\n    const rating = this.product.ratings[index];\n    if (rating.userId === this.userId) {\n      this.editRatingIndex = index;\n      this.newRating = rating.rating;\n      this.newReview = rating.review;\n      this.errorMessage = null; // Clear error when starting edit\n    } else {\n      this.errorMessage = 'You can only edit your own rating.';\n    }\n  }\n  getAvailabilityClass() {\n    return this.product?.availabilityStatus?.toLowerCase().replace(' ', '-') || 'out-of-stock';\n  }\n};\nProductDetailComponent = __decorate([Component({\n  selector: 'app-product-detail',\n  templateUrl: './product-detail.component.html',\n  styleUrls: ['./product-detail.component.css']\n})], ProductDetailComponent);\nexport { ProductDetailComponent };","map":{"version":3,"mappings":"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","names":["Component","ProductDetailComponent","constructor","route","dataService","authService","ngOnInit","id","snapshot","paramMap","get","userId","getCurrentUserId","currentUser","JSON","parse","localStorage","getItem","getProductById","subscribe","next","product","availabilityStatus","getAvailabilityStatus","quantity","error","err","errorMessage","message","user","submitRating","userRating","ratings","find","r","editRatingIndex","newRating","newReview","ratingObj","rating","review","push","updateProduct","getAverageRating","length","sum","reduce","acc","Number","toFixed","getUserName","users","firstName","startEditRating","index","getAvailabilityClass","toLowerCase","replace","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\malik\\Downloads\\Evaluation\\lab-angular-main\\src\\app\\features\\inventory\\product-detail\\product-detail.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DataService } from 'src/app/core/data.service';\nimport { Product } from 'src/app/shared/models/product.mode';\nimport { AuthService } from 'src/app/core/auth.service';\n\n@Component({\n  selector: 'app-product-detail',\n  templateUrl: './product-detail.component.html',\n  styleUrls: ['./product-detail.component.css']\n})\nexport class ProductDetailComponent implements OnInit {\n  product: Product | null = null;\n  errorMessage: string | null = null;\n  newRating: number = 0;\n  newReview: string = '';\n  userId: number = 0;\n  currentUser: any = {}; // Store user details\n  editRatingIndex: number | null = null; // Track which rating to edit\n\n  constructor(\n    private route: ActivatedRoute,\n    private dataService: DataService,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    const id = +this.route.snapshot.paramMap.get('id')!;\n    this.userId = this.getCurrentUserId();\n    this.currentUser = JSON.parse(localStorage.getItem('user') || '{}'); // Get user details\n    this.dataService.getProductById(id).subscribe({\n      next: (product: Product) => {\n        this.product = {\n          ...product,\n          availabilityStatus: this.getAvailabilityStatus(product.quantity) || 'Out of Stock'\n        };\n      },\n      error: (err: Error) => this.errorMessage = err.message\n    });\n  }\n\n  getCurrentUserId(): number {\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    return user.id || 0;\n  }\n\n  getAvailabilityStatus(quantity: number): string {\n    if (quantity > 10) return 'In Stock';\n    if (quantity > 0) return 'Low Stock';\n    return 'Out of Stock';\n  }\n\n  submitRating(): void {\n    if (!this.product) return;\n\n    const userRating = this.product.ratings?.find(r => r.userId === this.userId);\n    if (userRating && this.editRatingIndex === null) {\n      this.errorMessage = 'You have already rated this product. Use the edit option to modify your rating.';\n      // Disable form interaction when duplicate is detected\n      this.newRating = 0;\n      this.newReview = '';\n      return;\n    }\n\n    if (this.newRating >= 1 && this.newRating <= 5 && this.newReview && this.product) {\n      const ratingObj = { rating: this.newRating, review: this.newReview, userId: this.userId };\n      if (this.editRatingIndex !== null) {\n        // Edit existing rating\n        this.product.ratings![this.editRatingIndex] = ratingObj;\n        this.editRatingIndex = null; // Reset edit mode\n      } else {\n        // Add new rating (if no duplicate)\n        this.product.ratings = this.product.ratings || [];\n        this.product.ratings.push(ratingObj);\n      }\n      this.dataService.updateProduct(this.product).subscribe({\n        next: () => {\n          this.newRating = 0;\n          this.newReview = '';\n          this.errorMessage = null;\n          // Refresh the component to reflect changes\n          this.ngOnInit();\n        },\n        error: (err: Error) => this.errorMessage = err.message\n      });\n    } else {\n      this.errorMessage = 'Please select a rating (1-5) and provide a review.';\n    }\n  }\n\n  getAverageRating(): number {\n    if (!this.product?.ratings?.length) return 0; // Handle empty or undefined ratings\n    const sum = this.product.ratings.reduce((acc, r) => acc + r.rating, 0);\n    return Number((sum / this.product.ratings.length).toFixed(1)); // Ensure one decimal place\n  }\n\n  getUserName(userId: number): string {\n    // Use firstName from localStorage for simplicity\n    const users = JSON.parse(localStorage.getItem('user') || '{}');\n    return users.firstName || `User ${userId}`; // Fallback to userId if name not available\n  }\n\n  startEditRating(index: number): void {\n    if (!this.product?.ratings) return;\n    const rating = this.product.ratings[index];\n    if (rating.userId === this.userId) {\n      this.editRatingIndex = index;\n      this.newRating = rating.rating;\n      this.newReview = rating.review;\n      this.errorMessage = null; // Clear error when starting edit\n    } else {\n      this.errorMessage = 'You can only edit your own rating.';\n    }\n  }\n\n  getAvailabilityClass(): string {\n    return this.product?.availabilityStatus?.toLowerCase().replace(' ', '-') || 'out-of-stock';\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}